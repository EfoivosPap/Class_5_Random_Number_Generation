This is the oldest and best-known Algorithm for PRNG 
it is very fast, but is predictable that why its insecure for cryptographic purposes 
The LCG generates numbers using a simple recurrence relation:

The LCG generates numbers using a simple recurrence relation:

Xn+1 = (a*Xn + c ) mod m
ans a,c and m are constants degining the generator

Where Xn is the current state

 ## Preparation for the Exercises

Download the LCB.py
Go to the terminal all pip install time

Now for the first this exercise the arguments of the linear_congruential_generator function are:
  The seed
  a witch is the multipier 
  m the modulus
  The increment c 

By the example of the Class 5 we will put:

m = 11
a = 3
c = 4
and seed = 2
length is the length of the word  key that we want to generate so we will put 10
And the key tht it will generate must be 1017321017

Now if we want to get the maximum out of the algorithm we must follow this rules:

m should be a large number preferably a power of 2
a âˆ’ 1 should be divisible by all prime factors of m or by 4 if m is divisible by 4
c = 0 or c and m coprimes 

a is crusial for the the full period of the LCG 
so lets use a small example to demonstrate how the period of the LCG change 
depending on whether a-1 is satisfies the conditions

m = 12
c = 5
seed = 1

** a = 7 ** Valid
and the output is 054981 0549
so we can see that we have a period of 6

** a = 5 ** InValid
and the output is 10741 10741
so we can see that we have a period of 4

and if we put a = 13 and change the length from 10 to 15 we can see 
that the output is 61149270510381 6 we can see that we have a period of 12

and if we put a = 12 witch is not valid we will see 
that the output is 555555555555555 whiych have period of 1 

**So in conclusion** 
if (a) is a valid for m: 
the higher the a is higher period we have only if a-1 = m 
if a - 1 > m then even if it fulfills the conditions the period is still 1 
if (a) in not valid for m:
The highest perion we can have is 4 and its for a = 5
